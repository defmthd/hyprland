(deflisten workspaces-data "hyprland-workspaces _")

(defpoll active-window-title :interval "1s" "hyprctl activewindow -j | jq '.title'")
(defpoll current-time :interval "1s" "date +\%d.\%m' â€” '\%H:\%M")

;; ============================================================
;;                                                      Widgets
;; ============================================================
(defwidget workspaces [monitor]
  (eventbox :onscroll "hyprctl dispatch workspace `echo {} | sed 's/up/+/\' | sed 's/down/-/'`1"
    (box :class "workspaces" :space-evenly false
      (for i in {workspaces-data[monitor].workspaces}
        (button
          :onclick "hyprctl dispatch workspace ${i.id}"
          :class "${i.class}"
          "${i.name}"
        )
      )
    )
  )
)

;; ============================================================
;;                                                 Bar Assembly
;; ============================================================
(defwidget bar []
    (box :class "bar" :orientation "h"
        (box :class "left-column" :orientation "h" :halign "start" :space-evenly false
          (workspaces :monitor 0)
        )
        (box :class "center-column" :orientation "h"
          "${active-window-title}"
        )
        (box :class "right-column" :orientation "h" :halign "end" :space-evenly false
          "BAT"
          (circular-progress :class "bat" :start-at 0 :value "${EWW_BATTERY.BAT0.capacity}" :thickness 8)
          "CPU"
          (circular-progress :class "cpu" :start-at 0 :value "${EWW_CPU.avg}" :thickness 8)
          "MEM"
          (circular-progress :class "mem" :start-at 0 :value "${EWW_RAM.used_mem_perc}" :thickness 8)
          (systray :class "systray" :prepend-new true :spacing 8 :halign "end" :space-evenly false :icon-size 16)
          (label :class "current-time" :text "${current-time}")
        )
    )
)

;; ============================================================
;;                                                       Window
;; ============================================================
(defwindow bar :geometry (geometry :width "100%" :height "32px" :anchor "top center") :monitor 0 :stacking "fg" :windowtype "dock" :exclusive true
    (bar)
)
